'''
References:
    https://www.vinta.com.br/blog/2017/how-i-test-my-drf-serializers/
'''
# Core Django imports
from django.test import TestCase
from django.db import models

# This project apps imports
from catalogues.models import Manufacturer
from .serializers import ManufacturerSerializer


class ManufacturerSerializerTests(TestCase):

    def setUp(self):
        self.manufacturer_attributes = {
            'name': 'Acme, Inc.',
            'abbreviation': 'acme'
        }

        self.serializer_manufacturer_data = {
            'name': 'La Casa de la Bomba, Inc.',
            'abbreviation': 'LCDLB'
        }

        self.manufacturer = Manufacturer.objects.create(**self.manufacturer_attributes)
        self.serializer_manufacturer = ManufacturerSerializer(instance=self.manufacturer_attributes)


    def test_manufacturer_serializer_contains_expected_fields(self):
        '''
        The serializer has the exact attributes it is expected to.

        It uses sets to make sure that the output from the serializer has the
        exact keys I expect it to. Using a set to make this verification is 
        actually very important because it will guarantee that the addition or
        removal of any field to the serializer will be noticed by the tests. 
        Verifying the presence of the field using a series of assertIns would 
        pick the removal of a field but not additions.
        '''
        data = self.serializer_manufacturer.data
        self.assertEqual(set(data.keys()), set(['name', 'abbreviation']))


    def test_manufacturer_name_field_content(self):
        data = self.serializer_manufacturer.data
        self.assertEqual(data['name'], self.manufacturer_attributes['name'])


    def test_manufacturer_abbreviation_field_content(self):
        data = self.serializer_manufacturer.data
        self.assertEqual(data['abbreviation'], self.manufacturer_attributes['abbreviation'])


#from django.test import Client
# initialize the APIClient app
#client = Client()

#from django.urls import reverse

import json
from rest_framework import status

from rest_framework.test import APIClient
client = APIClient()

class GetAllManufacturersTest(TestCase):
    def setUp(self):
        Manufacturer.objects.create(
            name = 'Acme, Inc.', abbreviation= 'acme')
        Manufacturer.objects.create(
            name = 'La Casa de la Bomba, Inc.', abbreviation = 'LCDLB')

        from django.contrib.auth.models import User
        user = User.objects.create_superuser(
            username='super',
            password='Friday13',
            email='demo@demo.com'
        )
        user.save()


    # mark
    def test_get_all_manufacturers(self):
        client = APIClient()
        client.login(username='admin', password='Friday13')
        response = client.get('/api/v1/catalogues/manufacturer/')
        manufacturers = Manufacturer.objects.all()
        serializer = ManufacturerSerializer(manufacturers, many=True)
        #self.assertEqual(response.data, serializer.data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

