
def audit_jnpr_ibgp(address_ip, os_username, os_password, peers_expected):
    # initialize an empty list, this is what the function will return
    list_report = []

    from jnpr.junos import Device
    device = Device(host=address_ip, user=os_username, password=os_password)
    device.open(gather_facts=False)

    from jnpr.junos.op.bgp import bgpTable
    peers_seen = bgpTable(device).get()

    number_of_peers_expected = peers_expected.__len__()
    number_of_peers_seen = peers_seen.__len__()

    # TEST, the NUMBER of BGP peers EXPECTED and SEEN is the SAME
    if number_of_peers_seen == number_of_peers_seen:
        list_report.append("PASS, the number of BGP peers seen and expected is the same.")
    else:
        list_report.append("FAIL, the NUMBER of BGP peers seen and expected is NOT the same.")


    from jnpr.junos.factory.factory_loader import FactoryLoader
    import yaml
    yaml_data = \
    """
---
myBgpTable:
 rpc: get-bgp-neighbor-information
 item: bgp-peer
 view: bgpView
 key: peer-id

bgpView:
 fields:
  local_as: local-as
  peer_as: peer-as
  local_address: local-address
  peer_address: peer-address
  peer_state: peer-state
  # authentication-configured/
  # address_families: address-families
  # flap_count: flap-count  # how to clear counters?
  peer_id: peer-id
  local_id: local-id
  route_received: bgp-rib/received-prefix-count
   """

    globals().update(FactoryLoader().load(yaml.load(yaml_data)))
    bgp_peers_seen = myBgpTable(device).get()

    list_peers_seen = []
    for bgp_peer_seen in bgp_peers_seen:
        list_peers_seen.append(bgp_peer_seen.peer_address.split('+')[0])
    #print(list_peers_seen)

    # TEST, What you expected to see, you see
    for peer_expected in peers_expected:
        if peer_expected in list_peers_seen:
            list_report.append("PASS, you expected to see " + peer_expected + " and you are seeing it.")
        else:
            list_report.append("FAIL, you expected to see " + peer_expected + " and you do not see it.")

    # TEST, What you see, was expected
    for bgp_peer_seen in bgp_peers_seen:
        if bgp_peer_seen.peer_address.split('+')[0] in peers_expected:
            list_report.append("PASS, you see " + bgp_peer_seen.peer_address.split('+')[0] + " and that was expected.")
        else:
            list_report.append("FAIL, you see " + bgp_peer_seen.peer_address.split('+')[0] + " and that was NOT expected. " )

    device.close()
    return list_report

'''
# To test this function, uncomment this block
####  CONSTANTS  ####
fqdn = 'edge3-testlab.nn.hea.net'
nni_neighbors_expected = [ 'edge1-testlab', 'edge88-testlab' ]
#print(nni_neighbors_expected)
ibgp_ipv4_peers_expected = ['87.44.48.5', '87.44.48.6']
#print(ibgp_ipv4_peers_expected)
ibgp_ipv6_peers_expected = ['2001:770:200::5', '2001:770:200::6']
#print(ibgp_ipv6_peers_expected)

ibgp_peers_expected = ['87.44.48.5', '87.44.48.6', '2001:770:200::5', '2001:770:200::6']
local_username = 'heanet'
local_password = 'KqV7X98v!'
####  CONSTANTS  ####

import socket
address_ipv4 = (socket.gethostbyname(fqdn))
address_ipv6 = socket.getaddrinfo(fqdn, None, socket.AF_INET6)[0][4][0]
#print(address_ipv6)
blah = audit_jnpr_ibgp(address_ipv4, local_username, local_password, ibgp_peers_expected)
blah.insert(0, fqdn + "  ********  iBGP audit report, begin  ********")
blah.append(fqdn + "  ********  iBGP audit report, end  ********")
for i in blah:
    print(i)
'''
