
def audit_jnpr_phyport(address_ip, os_username, os_password):
    '''
    TO DO
    add more rx/tx errors, if there are any that respond
    '''
    # initialize an empty list, this is what the function will return
    list_report = []

    from jnpr.junos import Device
    device = Device(host=address_ip, user=os_username, password=os_password, gather_facts=False)
    device.open()

    from jnpr.junos.op.phyport import PhyPortTable
    #from jnpr.junos.op.phyport import PhyPortStatsTable
    from jnpr.junos.op.phyport import PhyPortErrorTable

    phyPorts = PhyPortTable(device).get()
    phyPortsErrors = PhyPortErrorTable(device).get()

    # TEST, Administrative and Operational status are consistent.
    for p in phyPorts:
        #print(p.key)
        if p.oper == p.admin:
            list_report.append("PASS, port " + p.key + " Administrative and " +
                "Operational status are the same. Both are in " + p.oper +
                " status."
            )
        else:
            list_report.append("FAIL, port " + p.key + " Administrative and " +
                "Operational status are NOT the same. Port " + p.key +  
                " is Administratively " + p.admin + ", but Operationally " + 
                p.oper + "."
            )

    # TEST, if it is Admin up it must have a description
    for p in phyPorts:
        if p.admin == "up":
            if p.description is None:
                list_report.append("FAIL, port " + p.key + " is Administratively " + p.admin +
                    " but does not have a correct description." + " Either " +
                    "apply an appropriate description, or put in Admin down."
                )
            else:
                if ("NN" or "UN") in "NN":
                    #print(p.description)
                    #print(type(p.description))
                #if ("NN" or "UN") in p.description:
                    list_report.append("PASS, port " + p.key + " is Administratively " + p.admin + " and configured " +
                        "to be either NNI or UNI."
                    )
                else:
                    list_report.append("FAIL, port " + p.key + " is Administratively " + p.admin + 
                        " but does not have a correct description." + " Either " +
                        "apply an appropriate description, or put in Admin down."
                    )

    # TEST, if it is Operationally up it must have a description
    for p in phyPorts:
        if p.oper == "up":
            if p.description is None:
                list_report.append("FAIL, port " + p.key + " is Operationally " + p.oper +
                    " but does not have a correct description." + " Either " +
                    "apply an appropriate description, or unplug the copper/fibre patch."
                )
            else:
                if ("NN" or "UN") in "NN":
                    #print(p.description)
                    #print(type(p.description))
                #if ("NN" or "UN") in p.description:
                    list_report.append("PASS, port " + p.key + " is Operationally " + p.oper + " and configured " +
                        "to be either NNI or UNI."
                    )
                else:
                    list_report.append("FAIL, port " + p.key + " is Operationally " + p.oper +
                        " but does not have a correct description." + " Either " +
                        "apply an appropriate description, or unplug the copper/fibre patch."
                    )

    # TEST,  rx input errors
    # verify p.rx_err_input is either string or int
    #print("p.rx_err_input")
    #print(p.rx_err_input)
    #print(type(p.rx_err_input))
    '''
    for p in phyPortsErrors:
        if p.rx_err_input is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.rx_err_input + " rx input errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.rx_err_input + " rx input errors.")

        if p.rx_err_drops is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.rx_err_drops + " rx drop errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.rx_err_drops + " rx drop errors.")

        if p.rx_err_frame is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.rx_err_frame + " rx frame errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.rx_err_frame + " rx frame errors.")

        if p.rx_err_runts is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.rx_err_runts + " rx runt errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.rx_err_runts + " rx runt errors.")

        if p.rx_err_discards is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.rx_err_discards + " rx discard errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.rx_err_discards + " rx discard errors.")

        if p.rx_err_fifo is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.rx_err_fifo + " rx FIFO errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.rx_err_fifo + " rx FIFO errors.")

        if p.rx_err_resource is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.rx_err_resource + " rx resource errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.rx_err_resource + " rx resource errors.")


        if p.tx_err_drops is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.tx_err_drops + " tx drop errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.tx_err_drops + " tx drop errors.")

        if p.tx_err_aged is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.tx_err_aged + " tx aged errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.tx_err_aged + " tx aged errors.")

        if p.tx_err_fifo is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.tx_err_fifo + " tx FIFO errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.tx_err_fifo + " tx FIFO errors.")

        if p.tx_err_mtu is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.tx_err_mtu + " tx MTU errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.tx_err_mtu + " tx MTU errors.")

        if p.tx_err_resource is "0":
            list_report.append("PASS, port " + p.key + " does have " + p.tx_err_resource + " tx resource errors.")
        else:
            list_report.append("FAIL, port " + p.key + " does have " + p.tx_err_resource + " tx resource errors.")
    '''


    device.close()
    return list_report

####  CONSTANTS  ####
fqdn = 'edge3-testlab.nn.hea.net'
nni_neighbors_expected = [ 'edge1-testlab', 'edge88-testlab' ]
local_username = 'heanet'
local_password = 'KqV7X98v!'
####  CONSTANTS  ####

import socket
address_ipv4 = (socket.gethostbyname(fqdn))
address_ipv6 = socket.getaddrinfo(fqdn, None, socket.AF_INET6)[0][4][0]

phyport_audit_report = audit_jnpr_phyport(address_ipv4, local_username, local_password)
phyport_audit_report.insert(0, "****  " + fqdn + "  ****" + "  ********  Physical Ports audit report, begin  ********")
phyport_audit_report.append("****  " + fqdn + "  ****" + "  ********  Physical Ports audit report, end  ********")
for i in phyport_audit_report:
    print(i)
